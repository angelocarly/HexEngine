#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_KHR_shader_subgroup_arithmetic: enable

#define WIDTH 779
#define HEIGHT 900
#define WORKGROUP_SIZE 16
#define CLUSTER_SIZE 2
#define HEXBUFFER_SIZE WIDTH * HEIGHT
#define CALCULATE_RANGE 2
layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1) in;

layout(push_constant) uniform constants
{
    float time;
} PushConstants;

struct hex_node {
    vec3 color;
};

layout (std430, binding = 0) buffer HexGrid {
    hex_node[] nodes;
} hexgrid;

#define WG_BUF_SIZE CLUSTER_SIZE * CLUSTER_SIZE * WORKGROUP_SIZE * WORKGROUP_SIZE
shared vec3 wg_hexdata[WG_BUF_SIZE];

vec3[6] updirs = vec3[6](
    vec3(-1.0, 1.0, 0.0),
    vec3(-1.0, 0.0, 1.0),
    vec3(0.0, -1.0, 1.0),
    vec3(1.0, -1.0, 0.0),
    vec3(1.0, 0.0, -1.0),
    vec3(0.0, 1.0, -1.0)
);

vec3 calcHexIndex(int position, int width);
vec3 calcRevolvingHexIndex(int position);
int calcHexIndex(vec3 position, int width);

float sphereSdf(vec3 pos, vec3 spherePos, float radius)
{
    return length(pos - spherePos) - radius;
}

float boxSdf(vec3 p, vec3 b)
{
    vec3 q = abs(p) - b;
    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);
}

float sdf(vec3 pos)
{
//    return max(sphereSdf(pos, vec3(30), 40), -sphereSdf(pos, vec3(10), 20));
      return min(
        max(
            boxSdf(pos - vec3(50) + vec3(sin(PushConstants.time) * 10, sin(PushConstants.time * 1.2) * 20, 0), vec3(20)),
            -sphereSdf(pos, vec3(50) - vec3(sin(PushConstants.time) * 10, sin(PushConstants.time * 1.2) * 20, 0), 27)
        ),
        max(
            sphereSdf(pos, vec3(60), 40),
            -sphereSdf(pos, vec3(40 + 10 * sin(PushConstants.time), 20 + 10 * cos(PushConstants.time * 0.6f), 40), 25)
        )
      );
//    return sphereSdf(pos, vec3(33), 20);
//    return boxSdf(pos - vec3(sin(PushConstants.time) * 10 + 20), vec3(10));
}

vec3 calcNormal( vec3  p ) // for function f(p)
{
    const float h = 0.0001; // replace by an appropriate value
    const vec2 k = vec2(1,-1);
    return normalize( k.xyy*sdf( p + k.xyy*h ) +
    k.yyx*sdf( p + k.yyx*h ) +
    k.yxy*sdf( p + k.yxy*h ) +
    k.xxx*sdf( p + k.xxx*h ) );
}

float trace(vec3 pos, vec3 dir)
{
    float t = 0;
    for(int step=0; step < 100; step++)
    {
        float tStep = sdf(pos + t * dir);

        t += tStep;
        if (tStep < 0.001f)
        {
            break;
        }

        if (step == 100 - 1)
        {
            return -1;
        }
    }
    return t;
}

vec3 cosColor(float t, vec3 d, vec3 e, vec3 f, vec3 g)
{
    return vec3(d + e*cos(6.28318*(f*t+g)));
}

void main()
{
    // Terminate unnecessary workgroup threads
    if (gl_GlobalInvocationID.x >= WIDTH || gl_GlobalInvocationID.y >= HEIGHT)
    return;

    int clustersize = 2;
    vec3 up = vec3(-.5, -.5, 1);
    vec3 right = vec3(1, -1, 0);

    // Position
    vec3 groupHexPos = (right * gl_WorkGroupID.x + up * gl_WorkGroupID.y) * WORKGROUP_SIZE * CLUSTER_SIZE;
    vec3 localHexPos = (right * gl_LocalInvocationID.x + up * gl_LocalInvocationID.y) * CLUSTER_SIZE;

    // Read buffer memory into shared memory
    for (int i = 0; i < CLUSTER_SIZE * CLUSTER_SIZE; i++)
    {
        vec3 clusterpos = calcHexIndex(i, clustersize);
        vec3 globalHexPos = groupHexPos + localHexPos + clusterpos;

        vec3 buffercolor = hexgrid.nodes[calcHexIndex(globalHexPos, WIDTH)].color;

        int wg_index = calcHexIndex(localHexPos + clusterpos, CLUSTER_SIZE * WORKGROUP_SIZE);
        wg_hexdata[wg_index] = buffercolor;
    }

    barrier();

    // Do shared memory operations
    for (int i = 0; i < CLUSTER_SIZE * CLUSTER_SIZE; i++)
    {
        vec3 clusterpos = calcHexIndex(i, clustersize);
        vec3 globalHexPos = groupHexPos + localHexPos + clusterpos;

//            vec3 col = cosColor((i + gl_WorkGroupID.y * 4) / 50.0, vec3(0.3, 0.3, 0.5), vec3(0.5, 0.3, 0.5), vec3(1.1, 0.4, 0.8), vec3(0.4, 0.1, 0.3));
        int wg_index = calcHexIndex(localHexPos + clusterpos, CLUSTER_SIZE * WORKGROUP_SIZE);
        vec3 col = wg_hexdata[wg_index];

        // Loop through cells that can have an impact on the current cell
        vec3 colmaxr = vec3(0);
        for (int rhi = 1; rhi < 1 + 6 * CALCULATE_RANGE * (CALCULATE_RANGE + 1) / 2; rhi++)
        {
            vec3 rh = calcRevolvingHexIndex(rhi) + localHexPos + clusterpos;

            int bufId = calcHexIndex(rh, CLUSTER_SIZE * WORKGROUP_SIZE);
            vec3 bufcol = wg_hexdata[bufId];
            if (bufcol.r > colmaxr.r) {
                colmaxr = bufcol;
            }
        }

//        hexgrid.nodes[calcHexIndex(globalHexPos, WIDTH)].color = wg_hexdata[wg_index - 1];
        hexgrid.nodes[calcHexIndex(globalHexPos, WIDTH)].color = colmaxr;
        //        hexgrid.nodes[calcHexIndex(globalHexPos)].color = vec3(wg_index / 900.0);

    }
}

vec3 calcHexIndex(int pos, int width) {
    vec3 hexpos = vec3(pos % width, 0, int(floor(float(pos) / width)));
    int offset = int(ceil(hexpos.z / 2.0));
    hexpos.x -= offset;
    hexpos.y = -hexpos.x - hexpos.z;

    return hexpos;
}

int calcHexIndex(vec3 pos, int width)
{
    int offset = int(ceil(pos.z / 2.0));
    if (pos.x + offset >= width || pos.z > width) return -1;
    return int(pos.x) + int(pos.z) * width + offset;
}

vec3 calcRevolvingHexIndex(int pos)
{
    if (pos == 0 ) return vec3(0);

    pos -= 1;
    int hexradius = int(floor((-3 + sqrt(9 + 12*pos)) / 6.0));
    int window = 3 * hexradius * (hexradius + 1);
    hexradius += 1;
    int leg = int((pos - window) / hexradius);
    int offset = (pos - window) % hexradius;

    vec3 hexpos = updirs[leg] * hexradius + updirs[(leg + 2) % 6] * offset;
    return hexpos;
}
