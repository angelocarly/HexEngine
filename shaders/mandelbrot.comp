#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WIDTH 1600
#define HEIGHT 900
#define WORKGROUP_SIZE 32
layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1) in;

layout(push_constant) uniform constants
{
    mat4 transform;
    float time;
} PushConstants;

struct Pixel{
    vec4 value;
};

layout (binding = 0, rgba8) uniform image2D resultImage;

vec3 mulFractal(vec3 a, vec3 b)
{
    vec3 result = vec3(0);
    result.x = a.x * b.x - a.y * b.y - a.z * b.z;
    result.y = a.y * b.x + a.y * b.z + a.x * b.y;
    result.z = a.z * b.x + a.z * b.y + a.x * b.z;
    return result;
}

void main() {

    vec3 camera = (PushConstants.transform * vec4(0, 0, 0, 1)).rgb;
    //        vec3 camera = (vec4(1, 1, 1, 1) * PushConstants.transform).rgb;

    /*
    In order to fit the work into workgroups, some unnecessary threads are launched.
    We terminate those threads here.
    */
    if (gl_GlobalInvocationID.x >= WIDTH || gl_GlobalInvocationID.y >= HEIGHT)
    return;

    float x = float(gl_GlobalInvocationID.x) / float(WIDTH);
    float y = float(gl_GlobalInvocationID.y) / float(HEIGHT);

    /*
    What follows is code for rendering the mandelbrot set.
    */
    vec2 uv = vec2(x, y);
    float n = 0.0;
    vec3 c = vec3(-.445, 0.0, 0) +  vec3((uv - 0.5)*(2.0+ 1.7*0.2), camera.z);
//        vec3 c = vec3(-.445, 0.0, 0) +  vec3(camera.z, (uv - 0.5)*(2.0+ 1.7*0.2));
//    vec3 c = vec3(0, 0.0, 0) +  vec3(camera.z, (uv - 0.5)*(2.0+ 1.7*0.2));
    vec3 z = vec3(0.0);
    const int M =200;
    for (int i = 0; i<M; i++)
    {
//                z = vec2(z.x*z.x - z.y*z.y, 2.*z.x*z.y) + c;
//                z = mulFractal(z, mulFractal(z, mulFractal(z, z))) + c;
        z = mulFractal(z, z) + c;
//                z = mulFractal(z, z) + c;
        if (dot(z, z) > 4) break;
        n++;
    }

    // we use a simple cosine palette to determine color:
    // http://iquilezles.org/www/articles/palettes/palettes.htm
    float t = float(n) / float(M);
    vec3 d = vec3(0.3, 0.3, 0.5);
    vec3 e = vec3(-0.2, -0.3, -0.5);
    vec3 f = vec3(2.1, 2.0, 3.0);
    vec3 g = vec3(0.0, 0.1, 0.0);
    vec4 color = vec4(d + e*cos(6.28318*(f*t+g)), 1.0);

    // store the rendered mandelbrot set into a storage buffer:
    //    resultImage[WIDTH * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x].value = color;
    //    imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), color);
    imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), color);

}