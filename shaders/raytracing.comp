#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WIDTH 1600
#define HEIGHT 900
#define WORKGROUP_SIZE 32
layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1) in;

layout(push_constant) uniform constants
{
    mat4 model;
    mat4 view;
    mat4 projection;
    float time;
} PushConstants;

struct Pixel
{
    vec4 value;
};

struct cast_result {
    bool valid;
    bool reflective;
    vec3 pos;
    vec3 normal;
    vec3 color;
};

layout (binding = 0, rgba8) uniform image2D resultImage;

float raySphereIntersect(vec3 r0, vec3 rd, vec3 s0, float sr) {
    // - r0: ray origin
    // - rd: normalized ray direction
    // - s0: sphere center
    // - sr: sphere radius
    // - Returns distance from r0 to first intersecion with sphere,
    //   or -1.0 if no intersection.
    float a = dot(rd, rd);
    vec3 s0_r0 = r0 - s0;
    float b = 2.0 * dot(rd, s0_r0);
    float c = dot(s0_r0, s0_r0) - (sr * sr);
    if (b*b - 4.0*a*c < 0.0) {
        return -1.0;
    }
    return (-b - sqrt((b*b) - 4.0*a*c))/(2.0*a);
}

cast_result cast_ray(vec3 origin, vec3 direction)
{
        vec3 spherepos = vec3(sin(PushConstants.time * 3.14 / 4) * 5, 2, 0);
//    vec3 spherepos = vec3(0, 2, 0);
    vec3 spherepos2 = vec3(0, 2, 4);
    vec3 spherepos3 = vec3(4, 2, 4);
    float sphereradius = 1.0f;

    float r = raySphereIntersect(origin, direction, spherepos, sphereradius);
    float r2 = raySphereIntersect(origin, direction, spherepos2, sphereradius);
    float r3 = raySphereIntersect(origin, direction, spherepos3, sphereradius);
    float t = - origin.y / direction.y;
    vec3 tv = origin + direction * t;

    cast_result result;
    result.reflective = false;
    result.valid = true;
    result.color = vec3(0);

    if (r < 0 && r2 < 0 && t < 0 && r3 < 0) {
        result.valid = false;
        return result;
    }
    if (r < 0) r = 2139095039;
    if (r2 < 0) r2 = 2139095039;
    if (r3 < 0) r3 = 2139095039;
    if (t < 0) t = 2139095039;

    if (r < t && r < r2 && r < r3) {
        result.pos = origin + direction * r;
        result.normal = normalize(result.pos - spherepos);
        result.color = vec3(0.05);
        result.reflective = true;
    } else if (r2 < t && r2 < r && r2 < r3) {
        result.pos = origin + direction * r2;
        result.normal = normalize(result.pos - spherepos2);
        result.color = vec3(0.05);
        result.reflective = true;
    } else if (r3 < t && r3 < r && r3 < r2) {
        result.pos = origin + direction * r3;
        result.normal = normalize(result.pos - spherepos3);
        result.color = vec3(0.05);
        result.reflective = true;
    } else if ((t < r && t < r2 && t < r3) && abs(tv.x) < 5 && abs(tv.z) < 5) {
        result.pos = tv;
        result.normal = vec3(0, 1, 0);
        result.color = vec3(tv.x, 0.2f, tv.z);
    }

    return result;
}

void main()
{
    //    vec3 camerapos = (PushConstants.transform * vec4(0, 0, 0, 1)).xyz;
    //    vec3 cameradir = (PushConstants.transform * vec4(0, 0, 1, 0)).xyz;

    // Terminate unnecessary workgroup threads
    if (gl_GlobalInvocationID.x >= WIDTH || gl_GlobalInvocationID.y >= HEIGHT)
    return;

    float x = float(gl_GlobalInvocationID.x) / float(WIDTH);
    float y = float(gl_GlobalInvocationID.y) / float(HEIGHT);

    vec2 uv = vec2(x, y) * 2.0 - 1.0;
    uv.x *= WIDTH / float(HEIGHT);
    //    uv.y *= HEIGHT / float(WIDTH);

    float near = 1.0f;
    float far = 100.0f;
    //    vec3 worldpos = ((-(PushConstants.model * PushConstants.view * PushConstants.projection) * (vec4(uv, 1, 1) * near))).xyz;
    vec4 worldpos4 = ((inverse(PushConstants.model) * inverse(PushConstants.view) * inverse(PushConstants.projection) * vec4(uv, -1, 1)));
    vec3 worldpos = worldpos4.xyz / worldpos4.w * near;
    vec3 worlddir = normalize((-(PushConstants.view * PushConstants.projection) * vec4(-uv * (far - near), far + near, far - near)).xyz);
    //    vec3 worlddir = vec3(1);

    int maxsteps = 5;

    vec3 pos = worldpos;
    vec3 dir = worlddir;
    vec3 color = vec3(0);
    for (int i=0; i<maxsteps; i++) {
        cast_result res = cast_ray(pos, dir);

        if (res.valid) {
            color += res.color;

            if (res.reflective) {
                pos = res.pos;
                vec3 reflection = normalize(2 * dot(-dir, res.normal) * res.normal + dir);
                dir = reflection;
                continue;
            }
        }

        break;
    }
    //    vec4 color = vec4(worldpos + worlddir * 10, 1);
    //    vec4 color = vec4(vec3(dot(vec3(1), vec3(1))/6), 1);

    imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(color, 1));
    //    imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(worlduv, 1));
    //        imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(worlddir, 1));
    //        imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(camerapos, 1));
    //        imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(worldpos, 1));
    //    imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(uv, 0, 1));


}