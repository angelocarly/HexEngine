#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_KHR_shader_subgroup_arithmetic: enable

#define WIDTH 779
#define HEIGHT 900
#define WORKGROUP_SIZE 16
#define CLUSTER_SIZE 2
#define LOCAL_SIZE (WORKGROUP_SIZE * CLUSTER_SIZE)
#define HEXBUFFER_SIZE WIDTH * HEIGHT
#define CALCULATE_RANGE 4
# define OVERLAP (CALCULATE_RANGE)
//#define OVERLAP CALCULATE_RANGE
layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1) in;

layout(push_constant) uniform constants
{
    float time;
} PushConstants;

struct hex_node {
    vec3 color;
};

struct hex_operation {
    int operation;
};

layout (std430, binding = 0) buffer HexGrid {
    hex_node[] nodes;
} hexgrid;

layout (std430, binding = 1) buffer HexGridOperations {
    hex_operation[] operations;
} hexoperations;

#define WG_BUF_SIZE CLUSTER_SIZE * CLUSTER_SIZE * WORKGROUP_SIZE * WORKGROUP_SIZE
shared int local_hexoperation_data[WG_BUF_SIZE];

vec3[6] updirs = vec3[6](
    vec3(-1.0, 1.0, 0.0),
    vec3(-1.0, 0.0, 1.0),
    vec3(0.0, -1.0, 1.0),
    vec3(1.0, -1.0, 0.0),
    vec3(1.0, 0.0, -1.0),
    vec3(0.0, 1.0, -1.0)
);

vec3 calcHexIndex(int position, int width);
vec3 calcRevolvingHexIndex(int position);
int calcHexIndex(vec3 position, int width);

void main()
{
    // Terminate unnecessary workgroup threads
    // TODO: also check for edges of workgroups that aren't processed due to CALCULATE_RANGE
    if (gl_GlobalInvocationID.x >= WIDTH || gl_GlobalInvocationID.y >= HEIGHT)
    return;

    vec3 up = vec3(-.5, -.5, 1);
    vec3 right = vec3(1, -1, 0);

    // Position
    vec3 groupHexPos = (right * gl_WorkGroupID.x + up * gl_WorkGroupID.y) * (LOCAL_SIZE - OVERLAP * 2);
    vec3 localHexPos = (right * gl_LocalInvocationID.x + up * gl_LocalInvocationID.y) * CLUSTER_SIZE;

    // Read general buffer memory and fill the shared operations buffer
    for (int i = 0; i < CLUSTER_SIZE * CLUSTER_SIZE; i++)
    {
        vec3 clusterpos = calcHexIndex(i, CLUSTER_SIZE);
        vec3 globalHexPos = groupHexPos + localHexPos + clusterpos;

        int bufferoperation = hexoperations.operations[calcHexIndex(globalHexPos, WIDTH)].operation;

        int wg_index = calcHexIndex(localHexPos + clusterpos, CLUSTER_SIZE * WORKGROUP_SIZE);
        local_hexoperation_data[wg_index] = bufferoperation;
    }

    barrier();

    // Neighbor pattern checking for every cluster node
    for (int i = 0; i < CLUSTER_SIZE * CLUSTER_SIZE; i++)
    {
        vec3 clusterpos = calcHexIndex(i, CLUSTER_SIZE);
        vec3 globalHexPos = groupHexPos + localHexPos + clusterpos;

        // Don't calculate if we're outside the calculation range
        int wg_index = calcHexIndex(localHexPos + clusterpos, LOCAL_SIZE);
        int x_i = wg_index % LOCAL_SIZE;
        int x_dist = min(x_i, LOCAL_SIZE - x_i - 1);
        int y_i = int(floor(float(wg_index) / LOCAL_SIZE));
        int y_dist = min(y_i, LOCAL_SIZE - y_i - 1);
        if (x_dist < CALCULATE_RANGE || y_dist < CALCULATE_RANGE)
        {
            continue;
        }


//        int max_op = 0;
//        for (int n = 0; n < 1 + 6 * CALCULATE_RANGE * (CALCULATE_RANGE - 1) / 2; n++)
//        {
//            vec3 neighborhexpos = calcRevolvingHexIndex(n);
//            int neighbor_wg_index = calcHexIndex(localHexPos + clusterpos + neighborhexpos, LOCAL_SIZE);
//
//            int neighbor_operation = local_hexoperation_data[neighbor_wg_index];
//
//            max_op = max(max_op, neighbor_operation);
//        }
        vec3[3] dirs = vec3[3](
        vec3(-1, 1, 0),
        vec3(0, -1, 1),
        vec3(1, 0, -1)
        );

        bool valid = false;
        for ( int i = 0; i < 3; i++ )
        {
            int neighbor_wg_index = calcHexIndex(localHexPos + clusterpos + dirs[i] * 2, LOCAL_SIZE);
            int neighbor_op = local_hexoperation_data[neighbor_wg_index];
            valid = valid || neighbor_op == 1;
        }

        bool valid2 = false;
        for ( int i = 0; i < 3; i++ )
        {
            int neighbor_wg_index = calcHexIndex(localHexPos + clusterpos - dirs[i], LOCAL_SIZE);
            int neighbor_op = local_hexoperation_data[neighbor_wg_index];
            valid2 = valid2 || neighbor_op == 1;
        }

        bool valid3 = false;
        for ( int i = 0; i < 3; i++ )
        {
            int neighbor_wg_index = calcHexIndex(localHexPos + clusterpos + dirs[i] * 3, LOCAL_SIZE);
            int neighbor_op = local_hexoperation_data[neighbor_wg_index];
            valid3 = valid3 || neighbor_op == 3;
        }

        bool valid4 = false;
        for ( int i = 0; i < 3; i++ )
        {
            int neighbor_wg_index = calcHexIndex(localHexPos + clusterpos - dirs[i] * 2, LOCAL_SIZE);
            int neighbor_op = local_hexoperation_data[neighbor_wg_index];
            valid4 = valid4 || neighbor_op == 2;
        }

        bool valid5 = false;
        for ( int i = 0; i < 3; i++ )
        {
            int neighbor_wg_index = calcHexIndex(localHexPos + clusterpos + dirs[i] * 1, LOCAL_SIZE);
            int neighbor_op = local_hexoperation_data[neighbor_wg_index];
            valid5 = valid5 || neighbor_op == 3;
        }

        vec3 col = hexgrid.nodes[calcHexIndex(globalHexPos, WIDTH)].color;
        if (valid) col += vec3(0.6, 0.7, -0.3);
        if (valid2) col += vec3(-2.4, -0.4, -0.8);
        if (valid3) col += vec3(1.4, 1.6, 2.4);
        if (valid4) col += vec3(-2.1, -0.7, 0);
        if (valid5) col += vec3(-1.7, -2.7, 0);
        hexgrid.nodes[calcHexIndex(globalHexPos, WIDTH)].color = min(vec3(10), vec3(col.r, col.g, 0));

        //        if ( local_hexoperation_data[wg_index].b == maxcol.b ) {
//            // Store operation
//            hexoperations.operations[calcHexIndex(globalHexPos, WIDTH)].operation = 1;
//        }
//        else {
//            hexoperations.operations[calcHexIndex(globalHexPos, WIDTH)].operation = 0;
//        }

    }

    /** Extra computations

    // Check local neighbours for triggers and store the operation in memory
    for (int i = 0; i < CLUSTER_SIZE * CLUSTER_SIZE; i++)
    {
        vec3 clusterpos = calcHexIndex(i, clustersize);
        vec3 globalHexPos = groupHexPos + localHexPos + clusterpos;

//            vec3 col = cosColor((i + gl_WorkGroupID.y * 4) / 50.0, vec3(0.3, 0.3, 0.5), vec3(0.5, 0.3, 0.5), vec3(1.1, 0.4, 0.8), vec3(0.4, 0.1, 0.3));
        int wg_index = calcHexIndex(localHexPos + clusterpos, CLUSTER_SIZE * WORKGROUP_SIZE);
        vec3 col = local_hexdata[wg_index];

        // Loop through cells that can have an impact on the current cell
        vec3 colmaxr = vec3(0);
        for (int rhi = 1; rhi < 1 + 6 * CALCULATE_RANGE * (CALCULATE_RANGE + 1) / 2; rhi++)
        {
            vec3 rh = calcRevolvingHexIndex(rhi) + localHexPos + clusterpos;

            // TODO: check for triggers and save them in a buffer
            int bufId = calcHexIndex(rh, CLUSTER_SIZE * WORKGROUP_SIZE);
            vec3 bufcol = local_hexdata[bufId];

        }
    }

    // Look through neighbours for operations and perform them
    for (int clusterindex = 0; clusterindex < CLUSTER_SIZE * CLUSTER_SIZE; clusterindex++)
    {
        vec3 clusterpos = calcHexIndex(clusterindex, clustersize);

        int localindex = calcHexIndex(localHexPos + clusterpos, CLUSTER_SIZE * WORKGROUP_SIZE);
        vec3 col = local_hexdata[localindex];

        // Loop through nearby cells with a possible impact on the current cell
        vec3 resultcol = vec3(0);
        for (int revolveIndex = 1; revolveIndex < 1 + 6 * CALCULATE_RANGE * (CALCULATE_RANGE + 1) / 2; revolveIndex++)
        {
            vec3 rh = calcRevolvingHexIndex(revolveIndex) + localHexPos + clusterpos;

            // TODO: Look for operations
            resultcol = vec3(0);
        }

        // Store the final color
        vec3 globalHexPos = groupHexPos + localHexPos + clusterpos;
        hexgrid.nodes[calcHexIndex(globalHexPos, WIDTH)].color = resultcol;

    }

    //            vec3 col = cosColor((i + gl_WorkGroupID.y * 4) / 50.0, vec3(0.3, 0.3, 0.5), vec3(0.5, 0.3, 0.5), vec3(1.1, 0.4, 0.8), vec3(0.4, 0.1, 0.3));
    **/
}

vec3 calcHexIndex(int pos, int width) {
    vec3 hexpos = vec3(pos % width, 0, int(floor(float(pos) / width)));
    int offset = int(ceil(hexpos.z / 2.0));
    hexpos.x -= offset;
    hexpos.y = -hexpos.x - hexpos.z;

    return hexpos;
}

int calcHexIndex(vec3 pos, int width)
{
    int offset = int(ceil(pos.z / 2.0));
    if (pos.x + offset >= width || pos.z > width) return -1;
    return int(pos.x) + int(pos.z) * width + offset;
}

vec3 calcRevolvingHexIndex(int pos)
{
    if (pos == 0 ) return vec3(0);

    pos -= 1;
    int hexradius = int(floor((-3 + sqrt(9 + 12*pos)) / 6.0));
    int window = 3 * hexradius * (hexradius + 1);
    hexradius += 1;
    int leg = int((pos - window) / hexradius);
    int offset = (pos - window) % hexradius;

    vec3 hexpos = updirs[leg] * hexradius + updirs[(leg + 2) % 6] * offset;
    return hexpos;
}
