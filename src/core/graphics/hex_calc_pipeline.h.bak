//
// Created by magnias on 04/04/2021.
//

#ifndef _HEX_CALC_PIPELINE_H_
#define _HEX_CALC_PIPELINE_H_

#include <vks/vks_util.h>
#include "render_pipeline.h"
#include <lodepng.h>
#include <vks/VulkanInitializers.h>

class HexCalcPipeline : public IRenderPipeline
{
public:

    struct hex_node
    {
        glm::vec3 color;
    };

    HexCalcPipeline(VksDevice &device, VksSwapChain &swapChain, VkDescriptorPool &descriptorPool)
            : _device(device), _descriptorPool(descriptorPool), _swapChain(swapChain)
    {
        init();
    }

    void init()
    {

        _computeQueue = _device.getComputeQueue();

        createDescriptorSetLayout();
        createPipelineLayout();
        createPipeline();
        createHexBuffer();
        createDescriptorSets();

        starttime =
                std::chrono::duration_cast<std::chrono::milliseconds>(
                        std::chrono::system_clock::now().time_since_epoch()
                );
    }

    void begin(VkCommandBuffer &commandBuffer, int frame) override
    {
        _currentCommandBuffer = commandBuffer;

        vkCmdBindPipeline(commandBuffer, VK_PIPELINE_BIND_POINT_COMPUTE, pipeline);
        vkCmdBindDescriptorSets(commandBuffer, VK_PIPELINE_BIND_POINT_COMPUTE, pipelineLayout, 0, 1, &_descriptorSet, 0,
                                NULL);

    };

    void end() override
    {
    }

    void updateBuffers(Camera camera)
    {}

    VkDescriptorBufferInfo getHexBuffer()
    {
        VkDescriptorBufferInfo bufferInfo{};
        bufferInfo.buffer = _buffer;
        bufferInfo.offset = 0;
        bufferInfo.range = _bufferSize;
        return bufferInfo;
    }

    void execute()
    {
        HexPushConstants constants;
        std::chrono::milliseconds time =
                std::chrono::duration_cast<std::chrono::milliseconds>(
                        std::chrono::system_clock::now().time_since_epoch()
                );
        constants.time = std::chrono::duration<float, std::milli>(time - starttime).count() / 1000.0f;
        vkCmdPushConstants(_currentCommandBuffer, pipelineLayout, VK_SHADER_STAGE_COMPUTE_BIT, 0,
                           sizeof(HexPushConstants), &constants);

        vkCmdDispatch(_currentCommandBuffer,
                      (uint32_t) ceil(_bufferSize / float(WORKGROUP_SIZE)),
                      1,
                      1);
    }

private:

    struct HexPushConstants
    {
        float time;
    };

    const int WORKGROUP_SIZE = 16;
    const int WIDTH = 1600;
    const int HEIGHT = 900;

    VksDevice &_device;
    VkDescriptorPool &_descriptorPool;
    VksSwapChain &_swapChain;
    VkPipelineLayout pipelineLayout;
    VkDescriptorSetLayout descriptorSetLayout;
    VkDescriptorSet _descriptorSet;
    VkPipeline pipeline;
    std::vector<VkBuffer> _uniformBuffers;
    std::vector<VkDeviceMemory> _uniformBuffersMemory;
    VkBuffer _buffer;
    VkDeviceMemory _bufferMemory;
    VkDeviceSize _bufferSize;

    VkCommandBuffer _currentCommandBuffer;
    uint32_t _currentFrame;

    VkQueue _computeQueue;

    std::chrono::milliseconds  starttime;

    /**
     * Create a pipeline layout
     * Stores the set of resources that can be used by the pipeline
     */
    void createPipelineLayout()
    {

        VkPushConstantRange push_constant;
        push_constant.offset = 0;
        push_constant.size = sizeof(HexPushConstants);
        push_constant.stageFlags = VK_SHADER_STAGE_COMPUTE_BIT;

        VkPipelineLayoutCreateInfo pipelineLayoutInfo{};
        pipelineLayoutInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO;
        pipelineLayoutInfo.setLayoutCount = 1;
        pipelineLayoutInfo.pSetLayouts = &descriptorSetLayout;
        pipelineLayoutInfo.pushConstantRangeCount = 1;
        pipelineLayoutInfo.pPushConstantRanges = &push_constant;
        if (vkCreatePipelineLayout(_device.getVkDevice(), &pipelineLayoutInfo, nullptr, &pipelineLayout) !=
            VK_SUCCESS)
        {
            throw std::runtime_error("failed to create pipeline layout!");
        }

    }

    /**
     * Stores the data that will be accessible to the descriptor set
     */
    void createDescriptorSetLayout()
    {

        VkDescriptorSetLayoutBinding binding[1];

        binding[0].binding = 0;
        binding[0].descriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER;
        binding[0].descriptorCount = 1;
        binding[0].stageFlags = VK_SHADER_STAGE_COMPUTE_BIT;

        VkDescriptorSetLayoutCreateInfo layoutInfo{};
        layoutInfo.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO;
        layoutInfo.bindingCount = 1;
        layoutInfo.pBindings = binding;

        if (vkCreateDescriptorSetLayout(_device.getVkDevice(), &layoutInfo, nullptr, &descriptorSetLayout) !=
            VK_SUCCESS)
        {
            throw std::runtime_error("failed to create descriptor set layout!");
        }
    }

    void createDescriptorSets()
    {
        std::vector<VkDescriptorSetLayout> layouts(_swapChain.getImageCount(), descriptorSetLayout);
        VkDescriptorSetAllocateInfo allocInfo{};
        allocInfo.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO;
        allocInfo.descriptorPool = _descriptorPool;
        allocInfo.descriptorSetCount = 1;
        allocInfo.pSetLayouts = &descriptorSetLayout;

        if (vkAllocateDescriptorSets(_device.getVkDevice(), &allocInfo, &_descriptorSet) != VK_SUCCESS)
        {
            throw std::runtime_error("failed to allocate descriptor sets!");
        }

        VkDescriptorBufferInfo bufferInfo{};
        bufferInfo.buffer = _buffer;
        bufferInfo.offset = 0;
        bufferInfo.range = _bufferSize;

        VkWriteDescriptorSet descriptorWrite{};

        descriptorWrite.sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
        descriptorWrite.dstSet = _descriptorSet;
        descriptorWrite.dstBinding = 0;
        descriptorWrite.dstArrayElement = 0;
        descriptorWrite.descriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER;
        descriptorWrite.descriptorCount = 1;
        descriptorWrite.pBufferInfo = &bufferInfo;

        vkUpdateDescriptorSets(_device.getVkDevice(), 1, &descriptorWrite, 0, nullptr);
    }

    void createPipeline()
    {
//		PipelineConfigInfo pipelineConfigInfo{};
//		VksPipeline::defaultPipelineConfigInfo(pipelineConfigInfo);
//		pipelineConfigInfo.renderPass = _swapChain.getRenderPass();
//		pipelineConfigInfo.pipelineLayout = pipelineLayout;
//		pipeline = std::make_unique<VksPipeline>(_device, _swapChain, pipelineConfigInfo);

        VkPipelineShaderStageCreateInfo shaderStageCreateInfo = {};
        shaderStageCreateInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO;
        shaderStageCreateInfo.stage = VK_SHADER_STAGE_COMPUTE_BIT;
        shaderStageCreateInfo.module = _device.createShaderModule(VksUtil::readFile("shaders/hex_calc.comp.spv"));
        shaderStageCreateInfo.pName = "main";

        VkPushConstantRange push_constant;
        push_constant.offset = 0;
        push_constant.size = sizeof(HexPushConstants);
        push_constant.stageFlags = VK_SHADER_STAGE_COMPUTE_BIT;

        /*
        The pipeline layout allows the pipeline to access descriptor sets.
        So we just specify the descriptor set layout we created earlier.
        */
        VkPipelineLayoutCreateInfo pipelineLayoutCreateInfo = {};
        pipelineLayoutCreateInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO;
        pipelineLayoutCreateInfo.setLayoutCount = 1;
        pipelineLayoutCreateInfo.pSetLayouts = &descriptorSetLayout;
        pipelineLayoutCreateInfo.pushConstantRangeCount = 1;
        pipelineLayoutCreateInfo.pPushConstantRanges = &push_constant;
        if (vkCreatePipelineLayout(_device.getVkDevice(), &pipelineLayoutCreateInfo, nullptr, &pipelineLayout)
            != VK_SUCCESS)
        {
            throw std::runtime_error("Failed to create compute pipeline layout");
        }

        VkComputePipelineCreateInfo pipelineCreateInfo = {};
        pipelineCreateInfo.sType = VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO;
        pipelineCreateInfo.stage = shaderStageCreateInfo;
        pipelineCreateInfo.layout = pipelineLayout;

        /*
        Now, we finally create the compute pipeline.
        */
        if (vkCreateComputePipelines(
                _device.getVkDevice(), VK_NULL_HANDLE,
                1, &pipelineCreateInfo,
                NULL, &pipeline) != VK_SUCCESS)
        {
            throw std::runtime_error("Failed to create compute pipeline");
        }
    }

    void createHexBuffer()
    {

        std::vector<hex_node> nodes;

        for (int i = 0; i < 6000; i++)
        {
            nodes.push_back({
                                    glm::vec3(
                                            static_cast <float> (rand()) / (static_cast <float> (RAND_MAX / 1.0f)),
                                            static_cast <float> (rand()) / (static_cast <float> (RAND_MAX / 1.0f)),
                                            static_cast <float> (rand()) / (static_cast <float> (RAND_MAX / 1.0f))
                                    )
                            });
        }

        _bufferSize = sizeof(hex_node) * nodes.size();
        _device.
                createBuffer(
                _bufferSize,
                VK_BUFFER_USAGE_STORAGE_BUFFER_BIT,
                // Allow the host to write to the memory and keep both values consistent with each other
                VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT
                | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT,
                _buffer,
                _bufferMemory);

        // Temporarily map the region of the host memory to the device memory and upload the marchdata
        void *data;
        vkMapMemory(_device
                            .
                                    getVkDevice(), _bufferMemory,
                    0, _bufferSize, 0, &data);
        memcpy(data, nodes.data(),
               static_cast
                       <size_t>(_bufferSize)
        );
        vkUnmapMemory(_device
                              .
                                      getVkDevice(), _bufferMemory
        );
    }

};

#endif //_HEX_CALC_PIPELINE_H_
